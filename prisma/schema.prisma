generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
//  directUrl = env("DIRECT_URL") // For Prisma Data Proxy
}

// Optional for WebAuthn support


// AUTH.JS MODELS - Add these for Google OAuth
 model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

// UPDATED USER MODEL - Modified to work with Auth.js
model User {
  id              String        @id @default(cuid())
  email           String        @unique
  password        String?       // Make optional for OAuth users
  name            String?       // Make optional initially
  role            UserRole      @default(DENTIST) // Add default
  licenseNumber   String?
  specialization  String?
  phone           String?
  isActive        Boolean       @default(true)
  lastLoginAt     DateTime?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  
  // Auth.js relations
  accounts        Account[]
  sessions        Session[]
  image           String?       // Pentru avatar de la OAuth providers
  emailVerified   DateTime?     // Pentru NextAuth email verification
  // Your existing relations
  appointments    Appointment[] @relation("AppointmentDentist")
  auditLogs       AuditLog[]
  patientsCreated Patient[]     @relation("PatientCreatedBy")
  receiptsIssued  Receipt[]     @relation("ReceiptIssuedBy")
  treatments      Treatment[]   @relation("TreatmentDentist")

  @@map("users")
}

model Patient {
  id                       String        @id @default(cuid())
  firstName                String
  lastName                 String
  email                    String?       @unique
  phone                    String
  dateOfBirth              DateTime
  gender                   Gender
  address                  String?
  city                     String?
  state                    String?
  zipCode                  String?
  country                  String?       @default("USA")
  bloodType                String?
  allergies                String[]      @default([])
  medications              String[]      @default([])
  medicalHistory           String?
  insuranceProvider        String?
  insurancePolicyNumber    String?
  insuranceGroupNumber     String?
  emergencyContactName     String?
  emergencyContactPhone    String?
  emergencyContactRelation String?
  notes                    String?
  isActive                 Boolean       @default(true)
  lastVisitAt              DateTime?
  createdAt                DateTime      @default(now())
  updatedAt                DateTime      @updatedAt
  createdById              String
  appointments             Appointment[]
  createdBy                User          @relation("PatientCreatedBy", fields: [createdById], references: [id])
  treatments               Treatment[]

  @@map("patients")
}

model Procedure {
  id                       String            @id @default(cuid())
  code                     String            @unique
  name                     String
  category                 ProcedureCategory
  description              String?
  defaultCost              Float
  insuranceCost            Float?
  estimatedDurationMinutes Int?
  isActive                 Boolean           @default(true)
  createdAt                DateTime          @default(now())
  updatedAt                DateTime          @updatedAt
  treatmentItems           TreatmentItem[]

  @@map("procedures")
}

model Treatment {
  id             String          @id @default(cuid())
  patientId      String
  dentistId      String
  chiefComplaint String
  diagnosis      String
  treatmentPlan  String
  notes          String?
  totalCost      Float
  paidAmount     Float           @default(0)
  discount       Float           @default(0)
  paymentStatus  PaymentStatus   @default(PENDING)
  paymentMethod  PaymentMethod?
  treatmentDate  DateTime
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  receipt        Receipt?
  items          TreatmentItem[]
  dentist        User            @relation("TreatmentDentist", fields: [dentistId], references: [id])
  patient        Patient         @relation(fields: [patientId], references: [id], onDelete: Cascade)

  @@map("treatments")
}

model TreatmentItem {
  id            String    @id @default(cuid())
  treatmentId   String
  procedureId   String
  toothNumbers  Int[]     @default([])
  toothSurfaces String[]  @default([])
  quantity      Int       @default(1)
  unitCost      Float
  totalCost     Float
  status        String    @default("PLANNED")
  notes         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  procedure     Procedure @relation(fields: [procedureId], references: [id])
  treatment     Treatment @relation(fields: [treatmentId], references: [id], onDelete: Cascade)

  @@map("treatment_items")
}

model Appointment {
  id              String            @id @default(cuid())
  patientId       String
  dentistId       String
  appointmentDate DateTime
  durationMinutes Int               @default(30)
  type            AppointmentType
  reason          String
  notes           String?
  status          AppointmentStatus @default(SCHEDULED)
  reminderSent    Boolean           @default(false)
  reminderSentAt  DateTime?
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  dentist         User              @relation("AppointmentDentist", fields: [dentistId], references: [id])
  patient         Patient           @relation(fields: [patientId], references: [id], onDelete: Cascade)

  @@map("appointments")
}

model Receipt {
  id            String         @id @default(cuid())
  treatmentId   String         @unique
  issuedById    String
  receiptNumber String         @unique
  subtotal      Float
  discount      Float          @default(0)
  tax           Float          @default(0)
  totalAmount   Float
  paidAmount    Float
  balanceDue    Float          @default(0)
  paymentMethod PaymentMethod?
  paymentDate   DateTime?
  transactionId String?
  qrCode        String?
  emailSent     Boolean        @default(false)
  emailSentAt   DateTime?
  emailAddress  String?
  status        String         @default("DRAFT")
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  issuedBy      User           @relation("ReceiptIssuedBy", fields: [issuedById], references: [id])
  treatment     Treatment      @relation(fields: [treatmentId], references: [id], onDelete: Cascade)

  @@map("receipts")
}

model ClinicSettings {
  id                   String   @id @default(cuid())
  clinicName           String
  address              String?
  city                 String?
  state                String?
  zipCode              String?
  country              String?  @default("USA")
  phone                String?
  email                String?
  website              String?
  taxId                String?
  licenseNumber        String?
  workingHours         Json?
  appointmentDuration  Int      @default(30)
  appointmentBuffer    Int      @default(5)
  reminderEnabled      Boolean  @default(true)
  reminderAdvanceHours Int      @default(24)
  receiptPrefix        String   @default("RCP")
  receiptFooter        String?
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt

  @@map("clinic_settings")
}

model AuditLog {
  id         String   @id @default(cuid())
  userId     String?
  userEmail  String?
  userName   String?
  action     String
  entityType String
  entityId   String?
  oldData    Json?
  newData    Json?
  newValue   String
  ipAddress  String?
  userAgent  String?
  createdAt  DateTime @default(now())
  user       User?    @relation(fields: [userId], references: [id])

  @@map("audit_logs")
}

enum UserRole {
  ADMIN
  DENTIST
  ASSISTANT
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

enum ProcedureCategory {
  DIAGNOSTIC
  PREVENTIVE
  RESTORATIVE
  ENDODONTICS
  ORAL_SURGERY
  PERIODONTICS
  ORTHODONTICS
  PROSTHODONTICS
  COSMETIC
  OTHER
}

enum AppointmentType {
  CONSULTATION
  CLEANING
  FOLLOW_UP
  EMERGENCY
  ROUTINE_CHECKUP
  TREATMENT
  OTHER
}

enum AppointmentStatus {
  SCHEDULED
  CONFIRMED
  IN_PROGRESS
  COMPLETED
  CANCELLED
  NO_SHOW
  RESCHEDULED
}

enum PaymentStatus {
  PENDING
  PARTIAL
  PAID
  REFUNDED
  CANCELLED
}

enum PaymentMethod {
  CASH
  CREDIT_CARD
  DEBIT_CARD
  CHECK
  INSURANCE
  BANK_TRANSFER
  OTHER
}
model ReminderBatchLog {
  id                String   @id @default(cuid())
  startTime         DateTime
  endTime           DateTime
  totalAppointments Int
  processed         Int
  successful        Int
  failed            Int
  duration          Int
  results           Json     // aici e mai bine Json dec√¢t String

  createdAt         DateTime @default(now())

  @@map("reminder_batch_logs")
}
